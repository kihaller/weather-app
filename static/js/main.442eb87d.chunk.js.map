{"version":3,"sources":["components/utils.js","contexts/WeatherContext.js","components/CityDetails.js","components/City.js","components/CitySelector.js","components/DailyForecasts.js","components/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["toCelsius","fahrenheitTemp","Math","floor","fetchWeatherData","lat","lon","a","fetch","then","response","json","data","convertWeatherData","timestamp","today","currentTemp","current","temp","minTemp","daily","min","maxTemp","max","conditionName","weather","description","conditionIcon","icon","forecasts","i","push","day","dt","Date","getDay","WeatherContext","createContext","WeatherContextProvider","props","useState","name","selected","cities","setCities","selectedCity","setSelectedCity","useEffect","Promise","all","map","city","updatedCities","filter","fetchAllCities","Provider","value","changeSelectedCity","cityName","forEach","children","CityDetails","useContext","className","src","alt","City","onClick","CitySelector","index","key","DailyForecast","forecast","Forecast","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8NAAO,SAASA,EAAUC,GACxB,OAAOC,KAAKC,MAA+B,GAAvBF,EAAiB,IAAW,GAiB3C,SAAeG,EAAtB,oC,4CAAO,WAAgCC,EAAKC,GAArC,eAAAC,EAAA,sEACcC,MAAM,uDAAD,OACiCH,EADjC,gBAC4CC,EAD5C,0FAEtBG,MAAK,SAACC,GAAD,OAAcA,EAASC,UAHzB,cACCC,EADD,yBAIEA,GAJF,4C,sBAOA,SAASC,EAAmBD,GAUjC,IATA,IAtBoBE,EAsBdC,EAAQ,CACZC,YAAaJ,EAAKK,QAAQC,KAC1BC,QAASP,EAAKQ,MAAM,GAAGF,KAAKG,IAC5BC,QAASV,EAAKQ,MAAM,GAAGF,KAAKK,IAC5BC,cAAeZ,EAAKK,QAAQQ,QAAQ,GAAGC,YACvCC,cAAef,EAAKK,QAAQQ,QAAQ,GAAGG,MAGrCC,EAAY,GACPC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAUE,KAAK,CACbC,KAjCgBlB,EAiCEF,EAAKQ,MAAMU,GAAGG,GA/BvB,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YARW,IAAIC,KAAiB,IAAZpB,GAULqB,WAuBbhB,QAASP,EAAKQ,MAAMU,GAAGZ,KAAKG,IAC5BC,QAASV,EAAKQ,MAAMU,GAAGZ,KAAKK,IAC5BC,cAAeZ,EAAKQ,MAAMU,GAAGL,QAAQ,GAAGC,YACxCC,cAAef,EAAKQ,MAAMU,GAAGL,QAAQ,GAAGG,OAI5C,MAAO,CAACb,EAAOc,GC1CV,IAAMO,EAAiBC,0BAoJfC,EAlJgB,SAACC,GAAW,IAAD,EACZC,mBAAS,CACnC,CACEC,KAAM,iBACNC,UAAU,EACVrC,IAAK,QACLC,KAAM,SACNS,MAAO,CACLC,YAAa,GACbG,QAAS,GACTG,QAAS,GACTE,cAAe,YACfG,cAAe,OAEjBE,UAAW,CACT,CACEG,IAAK,SACLb,QAAS,GACTG,QAAS,GACTE,cAAe,YACfG,cAAe,OAEjB,CACEK,IAAK,SACLb,QAAS,GACTG,QAAS,GACTE,cAAe,YACfG,cAAe,OAEjB,CACEK,IAAK,UACLb,QAAS,GACTG,QAAS,GACTE,cAAe,YACfG,cAAe,OAEjB,CACEK,IAAK,YACLb,QAAS,GACTG,QAAS,GACTE,cAAe,YACfG,cAAe,SAIrB,CACEc,KAAM,oBACNC,UAAU,EACVrC,IAAK,QACLC,KAAM,SACNS,MAAO,CACLC,YAAa,GACbG,QAAS,GACTG,QAAS,GACTE,cAAe,YACfG,cAAe,OAEjBE,UAAW,IAEb,CACEY,KAAM,eACNC,UAAU,EACVrC,IAAK,QACLC,KAAM,OACNS,MAAO,CACLC,YAAa,GACbG,QAAS,GACTG,QAAS,GACTE,cAAe,mBACfG,cAAe,OAEjBE,UAAW,IAEb,CACEY,KAAM,YACNC,UAAU,EACVrC,IAAK,QACLC,KAAM,QACNS,MAAO,CACLC,YAAa,GACbG,QAAS,GACTG,QAAS,GACTE,cAAe,aACfG,cAAe,OAEjBE,UAAW,MArFyB,mBACjCc,EADiC,KACzBC,EADyB,OAwFAJ,mBAASG,EAAO,IAxFhB,mBAwFjCE,EAxFiC,KAwFnBC,EAxFmB,KA0FxCC,qBAAU,WAAM,4CACd,4BAAAxC,EAAA,sEAC8ByC,QAAQC,IAClCN,EAAOO,IAAP,uCAAW,WAAOC,GAAP,uBAAA5C,EAAA,sEACUH,EAAiB+C,EAAK9C,IAAK8C,EAAK7C,KAD1C,cACHM,EADG,SAEkBC,EAAmBD,GAFrC,mBAEFG,EAFE,KAEKc,EAFL,uBAGF,CACLY,KAAMU,EAAKV,KACXpC,IAAK8C,EAAK9C,IACVC,IAAK6C,EAAK7C,IACVoC,SAAUS,EAAKT,SACf3B,QACAc,cATO,2CAAX,wDAFJ,OACQuB,EADR,OAgBER,EAAUQ,GAGVN,EAAgBM,EAAcC,QAAO,SAACF,GAAD,OAAUA,EAAKT,YAAU,IAnBhE,4CADc,uBAAC,WAAD,wBAsBdY,KACC,IAwBH,OACE,kBAAClB,EAAemB,SAAhB,CACEC,MAAO,CAAEb,SAAQE,eAAcY,mBAhBR,SAACC,GAC1B,IAAMN,EAAa,YAAOT,GAC1BS,EAAcO,SAAQ,SAACR,GACjBO,IAAaP,EAAKV,KACpBU,EAAKT,UAAW,EAEhBS,EAAKT,UAAW,KAIpBE,EAAUQ,GACVN,EAAgBM,EAAcC,QAAO,SAACF,GAAD,OAAUA,EAAKT,YAAU,OAO3DH,EAAMqB,WCjHEC,EA7BK,WAAO,IACjBhB,EAAiBiB,qBAAW1B,GAA5BS,aAEFlB,EAAgBkB,EAAa9B,MAAMY,cACnCH,EAAgBqB,EAAa9B,MAAMS,cACnCR,EAAc6B,EAAa9B,MAAMC,YACjCG,EAAU0B,EAAa9B,MAAMI,QAC7BG,EAAUuB,EAAa9B,MAAMO,QAEnC,OACE,yBAAKyC,UAAU,iBACb,4BAAKlB,EAAaJ,MAClB,yBAAKsB,UAAU,sBACb,yBAAKC,IAAG,iBAAYrC,EAAZ,QAAiCsC,IAAKzC,IAC9C,0BAAMuC,UAAU,gBAAgB/D,EAAUgB,GAA1C,SACA,0BAAM+C,UAAU,8BACb7D,KAAKC,MAAMa,GADd,SAGA,0BAAM+C,UAAU,cACb/D,EAAUmB,GADb,WAC4BnB,EAAUsB,GADtC,SAGA,0BAAMyC,UAAU,4BACb7D,KAAKC,MAAMgB,GADd,WAC6BjB,KAAKC,MAAMmB,GADxC,YCAO4C,EArBF,SAAC,GAAc,IAAZf,EAAW,EAAXA,KACNM,EAAuBK,qBAAW1B,GAAlCqB,mBACF9B,EAAgBwB,EAAKpC,MAAMY,cAC3BH,EAAgB2B,EAAKpC,MAAMS,cAC3BR,EAAcmC,EAAKpC,MAAMC,YAE/B,OACE,yBACEmD,QAAS,kBAAMV,EAAmBN,EAAKV,OACvCsB,UAAS,eAAUZ,EAAKT,SAAW,WAAa,OAEhD,4BAAKS,EAAKV,MACV,yBAAKuB,IAAG,iBAAYrC,EAAZ,QAAiCsC,IAAKzC,IAC9C,8BACGxB,EAAUgB,GADb,UAEE,0BAAM+C,UAAU,iBAAhB,IAAkC7D,KAAKC,MAAMa,GAA7C,YCHOoD,EAZM,WAAO,IAClBzB,EAAWmB,qBAAW1B,GAAtBO,OACR,OACE,yBAAKoB,UAAU,iBACZpB,EAAOO,KAAI,SAACC,EAAMkB,GAAP,OACV,kBAAC,EAAD,CAAMlB,KAAMA,EAAMmB,IAAKD,SCchBE,EApBO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB7C,EAAgB6C,EAAS7C,cACzBH,EAAgBgD,EAAShD,cACzBL,EAAUqD,EAASrD,QACnBG,EAAUkD,EAASlD,QAEzB,OACE,yBAAKyC,UAAU,kBACb,4BAAKS,EAASxC,KACd,yBAAKgC,IAAG,iBAAYrC,EAAZ,QAAiCsC,IAAKzC,IAC9C,8BACGxB,EAAUmB,GADb,WAC4BnB,EAAUsB,GADtC,SAGA,0BAAMyC,UAAU,iBACb7D,KAAKC,MAAMgB,GADd,WAC6BjB,KAAKC,MAAMmB,GADxC,WCDSmD,EAXE,WAAO,IACd5B,EAAiBiB,qBAAW1B,GAA5BS,aACR,OACE,yBAAKkB,UAAU,YACZlB,EAAahB,UAAUqB,KAAI,SAACsB,EAAUH,GAAX,OAC1B,kBAAC,EAAD,CAAeG,SAAUA,EAAUF,IAAKD,SCSjCK,MAZf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9E,MAAK,SAAA+E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.442eb87d.chunk.js","sourcesContent":["export function toCelsius(fahrenheitTemp) {\n  return Math.floor(((fahrenheitTemp - 32) * 5) / 9);\n}\n\nfunction getDayOfWeek(timestamp) {\n  const date = new Date(timestamp * 1000);\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  return days[date.getDay()];\n}\n\nexport async function fetchWeatherData(lat, lon) {\n  const data = await fetch(\n    `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly,alerts&appid=21f56e253e93188fc5823fc00953aca4&units=imperial`\n  ).then((response) => response.json());\n  return data;\n}\n\nexport function convertWeatherData(data) {\n  const today = {\n    currentTemp: data.current.temp,\n    minTemp: data.daily[0].temp.min,\n    maxTemp: data.daily[0].temp.max,\n    conditionName: data.current.weather[0].description,\n    conditionIcon: data.current.weather[0].icon,\n  };\n\n  let forecasts = [];\n  for (let i = 1; i < 5; i++) {\n    forecasts.push({\n      day: getDayOfWeek(data.daily[i].dt),\n      minTemp: data.daily[i].temp.min,\n      maxTemp: data.daily[i].temp.max,\n      conditionName: data.daily[i].weather[0].description,\n      conditionIcon: data.daily[i].weather[0].icon,\n    });\n  }\n\n  return [today, forecasts];\n}\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { convertWeatherData, fetchWeatherData } from \"../components/utils\";\n\nexport const WeatherContext = createContext();\n\nconst WeatherContextProvider = (props) => {\n  const [cities, setCities] = useState([\n    {\n      name: \"Costa Mesa, CA\",\n      selected: true,\n      lat: 33.6638,\n      lon: -117.9047,\n      today: {\n        currentTemp: 68,\n        minTemp: 59,\n        maxTemp: 77,\n        conditionName: \"clear sky\",\n        conditionIcon: \"01d\",\n      },\n      forecasts: [\n        {\n          day: \"Sunday\",\n          minTemp: 55,\n          maxTemp: 80,\n          conditionName: \"clear sky\",\n          conditionIcon: \"01d\",\n        },\n        {\n          day: \"Monday\",\n          minTemp: 55,\n          maxTemp: 80,\n          conditionName: \"clear sky\",\n          conditionIcon: \"01d\",\n        },\n        {\n          day: \"Tuesday\",\n          minTemp: 55,\n          maxTemp: 80,\n          conditionName: \"clear sky\",\n          conditionIcon: \"01d\",\n        },\n        {\n          day: \"Wednesday\",\n          minTemp: 55,\n          maxTemp: 80,\n          conditionName: \"clear sky\",\n          conditionIcon: \"01d\",\n        },\n      ],\n    },\n    {\n      name: \"San Francisco, CA\",\n      selected: false,\n      lat: 37.7749,\n      lon: -122.4194,\n      today: {\n        currentTemp: 81,\n        minTemp: 67,\n        maxTemp: 85,\n        conditionName: \"clear sky\",\n        conditionIcon: \"01d\",\n      },\n      forecasts: [],\n    },\n    {\n      name: \"New York, NY\",\n      selected: false,\n      lat: 40.7128,\n      lon: -74.006,\n      today: {\n        currentTemp: 78,\n        minTemp: 72,\n        maxTemp: 78,\n        conditionName: \"scattered clouds\",\n        conditionIcon: \"03d\",\n      },\n      forecasts: [],\n    },\n    {\n      name: \"Miami, FL\",\n      selected: false,\n      lat: 25.7617,\n      lon: -80.1918,\n      today: {\n        currentTemp: 85,\n        minTemp: 80,\n        maxTemp: 85,\n        conditionName: \"few clouds\",\n        conditionIcon: \"02d\",\n      },\n      forecasts: [],\n    },\n  ]);\n  const [selectedCity, setSelectedCity] = useState(cities[0]);\n\n  useEffect(() => {\n    async function fetchAllCities() {\n      const updatedCities = await Promise.all(\n        cities.map(async (city) => {\n          const data = await fetchWeatherData(city.lat, city.lon);\n          const [today, forecasts] = convertWeatherData(data);\n          return {\n            name: city.name,\n            lat: city.lat,\n            lon: city.lon,\n            selected: city.selected,\n            today,\n            forecasts,\n          };\n        })\n      );\n\n      setCities(updatedCities);\n\n      // Find the selected city and setSelectedCity\n      setSelectedCity(updatedCities.filter((city) => city.selected)[0]);\n    }\n    fetchAllCities();\n  }, []);\n\n  const addCity = (name, lat, lon) => {\n    // fetch to get weather data\n    // convert weather data\n    // add to state\n    const [today, forecasts] = []; // Placeholder (comes from API)\n    setCities([...cities, { name, lat, lon, today, forecasts }]);\n  };\n\n  const changeSelectedCity = (cityName) => {\n    const updatedCities = [...cities];\n    updatedCities.forEach((city) => {\n      if (cityName === city.name) {\n        city.selected = true;\n      } else {\n        city.selected = false;\n      }\n    });\n\n    setCities(updatedCities);\n    setSelectedCity(updatedCities.filter((city) => city.selected)[0]);\n  };\n\n  return (\n    <WeatherContext.Provider\n      value={{ cities, selectedCity, changeSelectedCity }}\n    >\n      {props.children}\n    </WeatherContext.Provider>\n  );\n};\n\nexport default WeatherContextProvider;\n","import React, { useContext, useState } from \"react\";\nimport { WeatherContext } from \"../contexts/WeatherContext\";\nimport { toCelsius } from \"./utils\";\n\nconst CityDetails = () => {\n  const { selectedCity } = useContext(WeatherContext);\n\n  const conditionIcon = selectedCity.today.conditionIcon;\n  const conditionName = selectedCity.today.conditionName;\n  const currentTemp = selectedCity.today.currentTemp;\n  const minTemp = selectedCity.today.minTemp;\n  const maxTemp = selectedCity.today.maxTemp;\n\n  return (\n    <div className=\"selected-city\">\n      <h1>{selectedCity.name}</h1>\n      <div className=\"selected-city-temp\">\n        <img src={`images/${conditionIcon}.svg`} alt={conditionName} />\n        <span className=\"current-temp\">{toCelsius(currentTemp)}°C</span>\n        <span className=\"current-temp temp-imperial\">\n          {Math.floor(currentTemp)}°F\n        </span>\n        <span className=\"temp-range\">\n          {toCelsius(minTemp)}°C - {toCelsius(maxTemp)}°C\n        </span>\n        <span className=\"temp-range temp-imperial\">\n          {Math.floor(minTemp)}°F - {Math.floor(maxTemp)}°F\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default CityDetails;\n","import React, { useContext } from \"react\";\nimport { toCelsius } from \"./utils\";\nimport { WeatherContext } from \"../contexts/WeatherContext\";\n\nconst City = ({ city }) => {\n  const { changeSelectedCity } = useContext(WeatherContext);\n  const conditionIcon = city.today.conditionIcon;\n  const conditionName = city.today.conditionName;\n  const currentTemp = city.today.currentTemp;\n\n  return (\n    <div\n      onClick={() => changeSelectedCity(city.name)}\n      className={`city ${city.selected ? \"selected\" : null}`}\n    >\n      <h3>{city.name}</h3>\n      <img src={`images/${conditionIcon}.svg`} alt={conditionName} />\n      <span>\n        {toCelsius(currentTemp)}°C /\n        <span className=\"temp-imperial\"> {Math.floor(currentTemp)}°F</span>\n      </span>\n    </div>\n  );\n};\n\nexport default City;\n","import React, { useContext } from \"react\";\nimport { WeatherContext } from \"../contexts/WeatherContext\";\nimport City from \"./City\";\n\nconst CitySelector = () => {\n  const { cities } = useContext(WeatherContext);\n  return (\n    <div className=\"city-selector\">\n      {cities.map((city, index) => (\n        <City city={city} key={index} />\n      ))}\n      {/* <button>+</button> */}\n    </div>\n  );\n};\n\nexport default CitySelector;\n","import React from \"react\";\nimport { toCelsius } from \"./utils\";\n\nconst DailyForecast = ({ forecast }) => {\n  const conditionIcon = forecast.conditionIcon;\n  const conditionName = forecast.conditionName;\n  const minTemp = forecast.minTemp;\n  const maxTemp = forecast.maxTemp;\n\n  return (\n    <div className=\"daily-forecast\">\n      <h2>{forecast.day}</h2>\n      <img src={`images/${conditionIcon}.svg`} alt={conditionName} />\n      <span>\n        {toCelsius(minTemp)}°C - {toCelsius(maxTemp)}°C\n      </span>\n      <span className=\"temp-imperial\">\n        {Math.floor(minTemp)}°F - {Math.floor(maxTemp)}°F\n      </span>\n    </div>\n  );\n};\n\nexport default DailyForecast;\n","import React, { useContext } from \"react\";\nimport DailyForecast from \"./DailyForecasts\";\nimport { WeatherContext } from \"../contexts/WeatherContext\";\n\nconst Forecast = () => {\n  const { selectedCity } = useContext(WeatherContext);\n  return (\n    <div className=\"forecast\">\n      {selectedCity.forecasts.map((forecast, index) => (\n        <DailyForecast forecast={forecast} key={index} />\n      ))}\n    </div>\n  );\n};\n\nexport default Forecast;\n","import React, { useEffect, useState } from \"react\";\nimport CityDetails from \"./components/CityDetails\";\nimport CitySelector from \"./components/CitySelector\";\nimport Forecast from \"./components/Forecast\";\nimport WeatherContextProvider from \"./contexts/WeatherContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherContextProvider>\n        <CitySelector />\n        <CityDetails />\n        <Forecast />\n      </WeatherContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}